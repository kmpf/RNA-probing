#!/usr/bin/env perl
#===============================================================================
#
#         FILE: SPARQLqueryRDF.pl
#
#        USAGE: ./SPARQLqueryRDF.pl  
#
#  DESCRIPTION: 
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Christoph Kaempf (CK), kaempf@bioinf.uni-leipzig.de
# ORGANIZATION: 
#      VERSION: 1.0
#      CREATED: 05.08.2012 15:29:50
#     REVISION: ---
#===============================================================================

## Loading modules and initializing variables ##
use strict;
use warnings;
use feature "switch";
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use Image::Magick;
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
use Log::Log4perl qw(get_logger :levels);
use Math::BigFloat;
use Pod::Usage;
use RDF::Query;
use RDF::Trine::Parser;
use RDF::Helper;
use Path::Class;
# load my modules
my $module_dir = dirname(__FILE__);
$module_dir =~ s/scripts$/RNAprobing/g;
push(@INC, $module_dir);
require ProbingRNA::RDATFile;
require ProbingRNA::OFFFile;
require ProbingRNA::BLASTresult;
require ProbingRNA::RNAupFile;


my $rdf_file = "";
my $sparql_file = "";
my $conf_file = "";

GetOptions(
    "rdf=s" => \$rdf_file,
    "sparql=s" => \$sparql_file,
    "conf=s" => \$conf_file);

###############################################################################
#                 
# Logger initiation  
#                 
###############################################################################

my $log4perl_conf = file(dirname(__FILE__), "RNAprobing.log.conf");

# Apply configuration to the logger
Log::Log4perl->init("$log4perl_conf");

# Get the logger
my $logger_name = "RNAprobing";
my $logger = &configureLogger($verbose, $logger_name);
$logger->info("++++ ".__FILE__." has been started. ++++");



    # Configure RDF::Helper
    my $rdf = RDF::Helper->new (
        BaseInterface => 'RDF::Trine',
        namespaces => {
            bioinf => "http://www.bioinf.uni-leipzig.de/~kaempf/RNAprobing.owl#",
            rdfs => "http://www.w3.org/2000/01/rdf-schema#",
            rdf => "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
            xsd => "http://www.w3.org/2001/XMLSchema#",
            '#default' => "http://purl.org/rss/1.0/",
            },
        ExpandQNames => 1);

    my $model = $rdf->model();
    my $base_uri = 'http://purl.org/rss/1.0/';
    my $parser = RDF::Trine::Parser->new( 'rdfxml' );
    $parser->parse_file_into_model( $base_uri, $rdf_file, $model );

open( my $sparql, "<", $sparql_file) or die "Couldn't open file $sparql_file. Error: $!";
my $sparql_query = "";
while (<$sparql>) {
    $sparql_query .= $_;
}
close $sarql;
print $sparql_query;

my $positive_list = "";


if ( $sparql_query =~ /[Ss][Ee][Ll][Ee][Cc][Tt]\s/ ) {
    # SPARQL SELECT Query
    my $query = RDF::Query->new( $sparql_query );
    my $iterator = $query->execute( $model );
    while (my $row = $iterator->next) {
      # $row is a HASHref containing variable name -> RDF Term bindings
      my @vars = keys %$row;
      foreach my $key ( @vars)
        $positive_list .= $row->{ $key }->as_string.","; 
        print $row->{ $key }->as_string."\n";
      }
    }
}

if ( $sparql_query =~ /[Cc][Oo][Nn][Ss][Tt][Rr][Uu][Cc][Tt]\s/ ) {
    # SPARQL CONSTRUCT/DESCRIBE Query
    my $query = RDF::Query->new( $sparql_query );
    my $iterator = $query->execute( $model );
    while (my $st = $iterator->next) {
      # $st is a RDF::Trine::Statement object representing an RDF triple
      print $st->as_string;
    }
}


open(my $conf, ">", $conf_file) or die "Couldn't open file $sparql_file. Error: $!";

close $conf;


__END__


=head1 NAME

SPARQLqueryRDF.pl - Querys a RDF model

=head1 SYNOPSIS

SPARQLqueryRDF.pl -f=</path/to/file> -v -v -v -t


=head1 OPTIONS

=over 4

=item -f, --file=</path/to/file>

RDAT file(s) to be converted to FASTA files

=item -t, --toDNA

if set convert RNA sequences are converted into DNA sequences

=item -v, --verbose

verbosity level increases by multiple times option given

=item -h, --help

prints this help page

=back


=back
=head1 DESCRIPTION
B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut

